"""Problem 3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DcXtzX2hsQkCwNQGgfJtTum9jbDFm9u_
"""

#SECTION 1: Indices
# This section goes through the cipher text and determines the index for each letter.
# This made it easier for me to refer to rather than having to count each time.
strings = [
   "TTEUM", "GQNDV", "EOIOL", "EDIRE", "MQTGS", "DAFDR", "CDYOX", "IZGZP",
   "PTAAI", "TUCSI", "XFBXY", "SUNFE", "SQRHI", "SAFHR", "TQRVS", "VQNBE",
   "EEAQG", "IBHDV", "SNARI", "DANSL", "EXESX", "EDSNJ", "AWEXA", "ODDHX",
   "EYPKS", "YEAES", "RYOET", "OXYZP", "PTAAI", "TUCRY", "BETHX", "UFINR"
]


cumulative_index = 0
for string in strings:
   print(f"String: {string}")
   for letter in string:
       print(f"Letter: {letter} Index: {cumulative_index}")
       cumulative_index += 1
   print()  # Add a line break after each string

#SECTION 2: Searching for Groupings
# I used this code to search the cipher for repeating groups, I would change the 2 in line 16 to different numbers
# This allowed me to see groupings faster and find more of them.
def find_repeated_groups(text, size):
    repeated_groups = {}
    for i in range(len(text) - size + 1):
        group = text[i:i+size]
        if group in repeated_groups:
            repeated_groups[group].append(i)
        else:
            repeated_groups[group] = [i]

    repeated_groups = {group: indices for group, indices in repeated_groups.items() if len(indices) > 1}

    return repeated_groups

given_letters = "TTEUM GQNDV EOIOL EDIRE MQTGS DAFDR CDYOX IZGZP PTAAI TUCSI XFBXY SUNFE SQRHI SAFHR TQRVS VQNBE EEAQG IBHDV SNARI DANSL EXESX EDSNJ AWEXA ODDHX EYPKS YEAES RYOET OXYZP PTAAI TUCRY BETHX UFINR"
repeated_groups = find_repeated_groups(given_letters.replace(" ", ""), 2
                                       )

print("Repeated groups of letters (size 2 or larger) and their indices:")
for group, indices in repeated_groups.items():
    print(f"{group}: {indices}")

#SECTION 3: IoC
# Calculate index of coincidence for the ciphertext - did the math so that I did not have to do it by hand
def calculate_index_of_coincidence(ciphertext):
    # Count the frequency of each letter
    letter_count = [0] * 26  # Assuming ciphertext only contains uppercase letters
    for char in ciphertext:
        if char.isalpha():
            index = ord(char.upper()) - ord('A')
            letter_count[index] += 1

    # Calculate the sum for the IC formula
    ic_sum = sum(count * (count - 1) for count in letter_count)

    # Calculate the Index of Coincidence
    N = len(ciphertext)
    index_of_coincidence = ic_sum / (N * (N - 1))

    return index_of_coincidence

# Example ciphertext
ciphertext = "TTEUM GQNDV EOIOL EDIRE MQTGS DAFDR CDYOX IZGZP PTAAI TUCSI XFBXY SUNFE   SQRHI SAFHR TQRVS VQNBE EEAQG IBHDV SNARI DANSL EXESX EDSNJ AWEXA ODDHX   EYPKS YEAES RYOET OXYZP PTAAI TUCRY BETHX UFINR"

# Calculate the Index of Coincidence
ic = calculate_index_of_coincidence(ciphertext.replace(" ", "").upper())
print(f"Index of Coincidence: {ic:.4f}")

#SECTION 4: New Alphabets and Count
# This code will compute the new Alphabets and give the count for how many times each letter is seen in each one
# again speeds up the process
from collections import Counter

def split_into_alphabets(ciphertext, key_length):
    alphabets = [''] * key_length
    for i, char in enumerate(ciphertext):
        alphabet_index = i % key_length
        alphabets[alphabet_index] += char
    return alphabets

def calculate_ioc(text):
    n = len(text)
    freq = Counter(text)
    ioc = sum(freq[char] * (freq[char] - 1) for char in freq) / (n * (n - 1))
    return ioc

def count_letters(alphabets):
    letter_counts = []
    for alphabet in alphabets:
        counts = Counter(alphabet.replace(" ", ""))  # Remove spaces before counting
        letter_counts.append(counts)
    return letter_counts

def main():
    ciphertext = "TTEUM GQNDV EOIOL EDIRE MQTGS DAFDR CDYOX IZGZP PTAAI TUCSI XFBXY SUNFE   SQRHI SAFHR TQRVS VQNBE EEAQG IBHDV SNARI DANSL EXESX EDSNJ AWEXA ODDHX   EYPKS YEAES RYOET OXYZP PTAAI TUCRY BETHX UFINR"
    key_length = 5

    alphabets = split_into_alphabets(ciphertext.replace(" ", ""), key_length)

    print("Ciphertext split into alphabets:")
    for i, alphabet in enumerate(alphabets):
        print(f"Alphabet {i+1}: {alphabet}")

    print("\nCalculating Index of Coincidence (IoC) for each alphabet:")
    for i, alphabet in enumerate(alphabets):
        ioc = calculate_ioc(alphabet)
        print(f"Alphabet {i+1}: IoC = {ioc:.4f}")

    letter_counts = count_letters(alphabets)
    print("\nCounting how many times each letter is seen in each alphabet:")
    for i, counts in enumerate(letter_counts):
        print(f"Alphabet {i+1}:")
        for char, count in counts.items():
            print(f"{char}: {count}")

if __name__ == "__main__":
    main()
